{"ast":null,"code":"var _jsxFileName = \"/Users/ashtonmaze/Code/GitHub/T3/frontend/src/App.js\";\nimport React, { Component } from \"react\"; // import ReactDOM from \"react-dom\";\n\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Vector3 } from \"three\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene(); // const canvas = document.querySelector('viewport');\n\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); // var renderer = new THREE.WebGLRenderer({ canvas });\n\n    var renderer = new THREE.WebGLRenderer();\n    scene.background = new THREE.Color('grey');\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    renderer.render(scene, camera);\n    camera.position.z = 4;\n    camera.position.y = 5;\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\n    const controls = new OrbitControls(camera, renderer.domElement);\n    var x = -10;\n    var ballMesh = new THREE.SphereGeometry(0.1);\n    var ballMat = new THREE.MeshBasicMaterial({\n      color: 0xdadada\n    });\n\n    for (var i = 0; i < 100; i++) {\n      window['cube' + i] = new THREE.Mesh(ballMesh, ballMat);\n      eval('cube' + i).position.x = x + i / 2;\n      eval('cube' + i).scale.set(i / 10, i / 10, i / 10);\n      eval('cube' + i).castShadow = true;\n      eval('cube' + i).receiveShadow = true;\n      scene.add(eval('cube' + i));\n      console.log(eval('cube' + i));\n      renderer.render(scene, camera);\n    }\n\n    var tableMesh = new THREE.BoxGeometry(6, 0.05, 4);\n    var tableMat = new THREE.MeshBasicMaterial({\n      color: 0x33f51\n    });\n    var table = new THREE.Mesh(tableMesh, tableMat);\n    scene.add(table);\n\n    function animate() {\n      controls.update();\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate(); // var geometry = new THREE.BoxGeometry( 2, 2, 2 );\n    // var material = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n    // var cube = new THREE.Mesh( geometry, material );\n    // cube.castShadow = true;\n    // cube.receiveShadow = true;\n    // scene.add( cube );\n    // camera.position.z = 5;\n    // var animate = function () {\n    //   requestAnimationFrame( animate );\n    //   cube.rotation.x += 0.01;\n    //   cube.rotation.y += 0.01;\n    //   cube.rotation.z += 0.01;\n    //   renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewport\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ashtonmaze/Code/GitHub/T3/frontend/src/App.js"],"names":["React","Component","THREE","OrbitControls","Vector3","App","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","background","Color","setSize","document","body","appendChild","domElement","render","position","z","y","lookAt","controls","x","ballMesh","SphereGeometry","ballMat","MeshBasicMaterial","color","i","Mesh","eval","scale","set","castShadow","receiveShadow","add","console","log","tableMesh","BoxGeometry","tableMat","table","animate","update","requestAnimationFrame"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,2CAA9B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAC1BK,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAIC,KAAK,GAAG,IAAIL,KAAK,CAACM,KAAV,EAAZ,CAFkB,CAGlB;;AACA,QAAIC,MAAM,GAAG,IAAIP,KAAK,CAACQ,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb,CAJkB,CAKlB;;AACA,QAAIC,QAAQ,GAAG,IAAIZ,KAAK,CAACa,aAAV,EAAf;AACAR,IAAAA,KAAK,CAACS,UAAN,GAAmB,IAAId,KAAK,CAACe,KAAV,CAAgB,MAAhB,CAAnB;AACAH,IAAAA,QAAQ,CAACI,OAAT,CAAkBP,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C;AACAM,IAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA2BP,QAAQ,CAACQ,UAApC;AACAR,IAAAA,QAAQ,CAACS,MAAT,CAAiBhB,KAAjB,EAAwBE,MAAxB;AAEAA,IAAAA,MAAM,CAACe,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AACAhB,IAAAA,MAAM,CAACe,QAAP,CAAgBE,CAAhB,GAAoB,CAApB;AACAjB,IAAAA,MAAM,CAACkB,MAAP,CAAc,IAAIzB,KAAK,CAACE,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAd;AACA,UAAMwB,QAAQ,GAAG,IAAIzB,aAAJ,CAAmBM,MAAnB,EAA2BK,QAAQ,CAACQ,UAApC,CAAjB;AAEA,QAAIO,CAAC,GAAG,CAAC,EAAT;AACA,QAAIC,QAAQ,GAAG,IAAI5B,KAAK,CAAC6B,cAAV,CAA0B,GAA1B,CAAf;AACA,QAAIC,OAAO,GAAG,IAAI9B,KAAK,CAAC+B,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BxB,MAAAA,MAAM,CAAC,SAAOwB,CAAR,CAAN,GAAmB,IAAIjC,KAAK,CAACkC,IAAV,CAAgBN,QAAhB,EAA0BE,OAA1B,CAAnB;AACAK,MAAAA,IAAI,CAAC,SAAOF,CAAR,CAAJ,CAAeX,QAAf,CAAwBK,CAAxB,GAA6BA,CAAC,GAAEM,CAAC,GAAC,CAAlC;AACAE,MAAAA,IAAI,CAAC,SAAOF,CAAR,CAAJ,CAAeG,KAAf,CAAqBC,GAArB,CAAyBJ,CAAC,GAAC,EAA3B,EAA+BA,CAAC,GAAC,EAAjC,EAAqCA,CAAC,GAAC,EAAvC;AACAE,MAAAA,IAAI,CAAC,SAAOF,CAAR,CAAJ,CAAeK,UAAf,GAA4B,IAA5B;AACAH,MAAAA,IAAI,CAAC,SAAOF,CAAR,CAAJ,CAAeM,aAAf,GAA+B,IAA/B;AACAlC,MAAAA,KAAK,CAACmC,GAAN,CAAWL,IAAI,CAAC,SAAOF,CAAR,CAAf;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAI,CAAC,SAAOF,CAAR,CAAhB;AACArB,MAAAA,QAAQ,CAACS,MAAT,CAAiBhB,KAAjB,EAAwBE,MAAxB;AACD;;AAED,QAAIoC,SAAS,GAAG,IAAI3C,KAAK,CAAC4C,WAAV,CAAuB,CAAvB,EAA0B,IAA1B,EAAgC,CAAhC,CAAhB;AACA,QAAIC,QAAQ,GAAG,IAAI7C,KAAK,CAAC+B,iBAAV,CAA6B;AAACC,MAAAA,KAAK,EAAE;AAAR,KAA7B,CAAf;AACA,QAAIc,KAAK,GAAG,IAAI9C,KAAK,CAACkC,IAAV,CAAgBS,SAAhB,EAA2BE,QAA3B,CAAZ;AACAxC,IAAAA,KAAK,CAACmC,GAAN,CAAWM,KAAX;;AACE,aAASC,OAAT,GACJ;AACIrB,MAAAA,QAAQ,CAACsB,MAAT;AACAC,MAAAA,qBAAqB,CAAGF,OAAH,CAArB;AACAnC,MAAAA,QAAQ,CAACS,MAAT,CAAiBhB,KAAjB,EAAwBE,MAAxB;AACH;;AACDwC,IAAAA,OAAO,GAzCa,CA2ClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD1B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AAjEyB;;AAmE5B,eAAelB,GAAf","sourcesContent":["import React, { Component } from \"react\";\n// import ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Vector3 } from \"three\";\nimport './App.css'\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene();\n    // const canvas = document.querySelector('viewport');\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // var renderer = new THREE.WebGLRenderer({ canvas });\n    var renderer = new THREE.WebGLRenderer();\n    scene.background = new THREE.Color('grey');\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    document.body.appendChild( renderer.domElement );\n    renderer.render( scene, camera );\n\n    camera.position.z = 4;\n    camera.position.y = 5;\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\n    const controls = new OrbitControls( camera, renderer.domElement );\n\n    var x = -10\n    var ballMesh = new THREE.SphereGeometry( 0.1 );\n    var ballMat = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n    for (var i = 0; i < 100; i++) {\n      window['cube'+i] = new THREE.Mesh( ballMesh, ballMat );\n      eval('cube'+i).position.x = (x+(i/2));\n      eval('cube'+i).scale.set(i/10, i/10, i/10);\n      eval('cube'+i).castShadow = true;\n      eval('cube'+i).receiveShadow = true;\n      scene.add( eval('cube'+i) );\n      console.log(eval('cube'+i));\n      renderer.render( scene, camera );\n    }\n\n    var tableMesh = new THREE.BoxGeometry( 6, 0.05, 4 );\n    var tableMat = new THREE.MeshBasicMaterial( {color: 0x33f51});\n    var table = new THREE.Mesh( tableMesh, tableMat );\n    scene.add( table );\n      function animate()\n  {\n      controls.update();\n      requestAnimationFrame ( animate );  \n      renderer.render (scene, camera);\n  }\n  animate();\n\n    // var geometry = new THREE.BoxGeometry( 2, 2, 2 );\n    // var material = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n    // var cube = new THREE.Mesh( geometry, material );\n    // cube.castShadow = true;\n    // cube.receiveShadow = true;\n    // scene.add( cube );\n    // camera.position.z = 5;\n    // var animate = function () {\n    //   requestAnimationFrame( animate );\n    //   cube.rotation.x += 0.01;\n    //   cube.rotation.y += 0.01;\n    //   cube.rotation.z += 0.01;\n    //   renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return (\n      <div className=\"viewport\"></div>\n    )\n  }\n}\nexport default App"]},"metadata":{},"sourceType":"module"}