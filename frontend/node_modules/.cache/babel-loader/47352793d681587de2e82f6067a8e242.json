{"ast":null,"code":"var _jsxFileName = \"/Users/ashtonmaze/Code/GitHub/T3/frontend/src/App.js\";\nimport React, { Component } from \"react\"; // import ReactDOM from \"react-dom\";\n\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"; // import { Vector3 } from \"three\";\n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene(); // const canvas = document.querySelector('viewport');\n\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); // var renderer = new THREE.WebGLRenderer({ canvas });\n\n    var renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    scene.background = new THREE.Color('grey');\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    renderer.render(scene, camera);\n    camera.position.z = 2;\n    camera.position.y = 1.5;\n    camera.position.x = 1;\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\n    const controls = new OrbitControls(camera, renderer.domElement);\n    var overhead = new THREE.AmbientLight({\n      color: 0xffffff\n    }, 1);\n    scene.add(overhead);\n    const lightL1 = new THREE.DirectionalLight(0x404040, 3); // soft white light\n\n    const lightR1 = new THREE.DirectionalLight(0x404040, 3); // soft white light\n\n    const lightL2 = new THREE.DirectionalLight(0x404040, 3); // soft white light\n\n    const lightR2 = new THREE.DirectionalLight(0x404040, 3); // soft white light\n\n    lightL1.position.x = -1;\n    lightR1.position.x = 1;\n    lightL2.position.x = -1;\n    lightR2.position.x = 1;\n    lightL1.position.z = 1;\n    lightR1.position.z = 1;\n    lightL2.position.z = -1;\n    lightR2.position.z = -1;\n    scene.add(lightL1);\n    scene.add(lightR1);\n    scene.add(lightL2);\n    scene.add(lightR2);\n    var x = -1;\n    var ballMesh = new THREE.SphereGeometry(0.04); // var ballMat = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n\n    var ballMat = new THREE.MeshPhongMaterial({\n      color: 0xdadada\n    });\n\n    for (var i = 0; i < 20; i++) {\n      window['cube' + i] = new THREE.Mesh(ballMesh, ballMat);\n      eval('cube' + i).position.x = x + i / 15;\n      eval('cube' + i).position.y = 0.1 + i / 15; // eval('cube'+i).scale.set(i/10, i/10, i/10);\n\n      eval('cube' + i).castShadow = true;\n      eval('cube' + i).receiveShadow = true;\n      scene.add(eval('cube' + i));\n      console.log(eval('cube' + i));\n      renderer.render(scene, camera);\n    }\n\n    var tableMesh = new THREE.BoxGeometry(2.74, 0.05, 1.526);\n    var tableMat = new THREE.MeshPhongMaterial({\n      color: 0x335f51\n    });\n    var table = new THREE.Mesh(tableMesh, tableMat);\n    table.castShadow = true;\n    table.receiveShadow = true;\n    scene.add(table);\n\n    function animate() {\n      controls.update();\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate(); // var geometry = new THREE.BoxGeometry( 2, 2, 2 );\n    // var material = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n    // var cube = new THREE.Mesh( geometry, material );\n    // cube.castShadow = true;\n    // cube.receiveShadow = true;\n    // scene.add( cube );\n    // camera.position.z = 5;\n    // var animate = function () {\n    //   requestAnimationFrame( animate );\n    //   cube.rotation.x += 0.01;\n    //   cube.rotation.y += 0.01;\n    //   cube.rotation.z += 0.01;\n    //   renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewport\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ashtonmaze/Code/GitHub/T3/frontend/src/App.js"],"names":["React","Component","THREE","OrbitControls","App","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","background","Color","setSize","document","body","appendChild","domElement","render","position","z","y","x","lookAt","Vector3","controls","overhead","AmbientLight","color","add","lightL1","DirectionalLight","lightR1","lightL2","lightR2","ballMesh","SphereGeometry","ballMat","MeshPhongMaterial","i","Mesh","eval","castShadow","receiveShadow","console","log","tableMesh","BoxGeometry","tableMat","table","animate","update","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n// import { Vector3 } from \"three\";\nimport './App.css'\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene();\n    // const canvas = document.querySelector('viewport');\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // var renderer = new THREE.WebGLRenderer({ canvas });\n    var renderer = new THREE.WebGLRenderer( { antialias: true } );\n    scene.background = new THREE.Color('grey');\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    document.body.appendChild( renderer.domElement );\n    renderer.render( scene, camera );\n\n    camera.position.z = 2;\n    camera.position.y = 1.5;\n    camera.position.x = 1;\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\n    const controls = new OrbitControls( camera, renderer.domElement );\n\n    var overhead = new THREE.AmbientLight( {color: 0xffffff}, 1);\n    scene.add( overhead );\n\n    const lightL1 = new THREE.DirectionalLight( 0x404040, 3); // soft white light\n    const lightR1 = new THREE.DirectionalLight( 0x404040, 3); // soft white light\n    const lightL2 = new THREE.DirectionalLight( 0x404040, 3); // soft white light\n    const lightR2 = new THREE.DirectionalLight( 0x404040, 3); // soft white light\n    lightL1.position.x = -1;\n    lightR1.position.x = 1;\n    lightL2.position.x = -1;\n    lightR2.position.x = 1;\n    lightL1.position.z = 1;\n    lightR1.position.z = 1;\n    lightL2.position.z = -1;\n    lightR2.position.z = -1;\n    scene.add( lightL1 );\n    scene.add( lightR1 );\n    scene.add( lightL2 );\n    scene.add( lightR2 );\n\n    var x = -1\n    var ballMesh = new THREE.SphereGeometry( 0.04 );\n    // var ballMat = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n    var ballMat = new THREE.MeshPhongMaterial( { color: 0xdadada } );\n    for (var i = 0; i < 20; i++) {\n      window['cube'+i] = new THREE.Mesh( ballMesh, ballMat );\n      eval('cube'+i).position.x = (x+(i/15));\n      eval('cube'+i).position.y = (0.1+(i/15));\n      // eval('cube'+i).scale.set(i/10, i/10, i/10);\n      eval('cube'+i).castShadow = true;\n      eval('cube'+i).receiveShadow = true;\n      scene.add( eval('cube'+i) );\n      console.log(eval('cube'+i));\n      renderer.render( scene, camera );\n    }\n\n    var tableMesh = new THREE.BoxGeometry( 2.74, 0.05, 1.526 );\n    var tableMat = new THREE.MeshPhongMaterial( {color: 0x335f51});\n    var table = new THREE.Mesh( tableMesh, tableMat );\n    table.castShadow= true;\n    table.receiveShadow = true;\n    scene.add( table );\n\n    function animate()\n    {\n        controls.update();\n        requestAnimationFrame ( animate );  \n        renderer.render (scene, camera);\n    }\n    animate();\n\n    // var geometry = new THREE.BoxGeometry( 2, 2, 2 );\n    // var material = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n    // var cube = new THREE.Mesh( geometry, material );\n    // cube.castShadow = true;\n    // cube.receiveShadow = true;\n    // scene.add( cube );\n    // camera.position.z = 5;\n    // var animate = function () {\n    //   requestAnimationFrame( animate );\n    //   cube.rotation.x += 0.01;\n    //   cube.rotation.y += 0.01;\n    //   cube.rotation.z += 0.01;\n    //   renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return (\n      <div className=\"viewport\"></div>\n    )\n  }\n}\nexport default App"]},"metadata":{},"sourceType":"module"}