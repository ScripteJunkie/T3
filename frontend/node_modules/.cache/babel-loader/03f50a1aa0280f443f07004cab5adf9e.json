{"ast":null,"code":"var _jsxFileName = \"/Users/ashtonmaze/Code/GitHub/T3/frontend/src/App.js\";\nimport React, { Component } from \"react\"; // import ReactDOM from \"react-dom\";\n\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"; // import { Vector3 } from \"three\";\n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene(); // const canvas = document.querySelector('viewport');\n\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); // var renderer = new THREE.WebGLRenderer({ canvas });\n\n    var renderer = new THREE.WebGLRenderer();\n    scene.background = new THREE.Color('grey');\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    renderer.render(scene, camera);\n    camera.position.z = 2;\n    camera.position.y = 1.5;\n    camera.position.x = 1;\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\n    const controls = new OrbitControls(camera, renderer.domElement); // var overhead = new THREE.AmbientLight( {color: 0xffffff}, 2);\n    // scene.add( overhead );\n\n    const light = new THREE.DirectionalLight(0x404040, 5); // soft white light\n\n    scene.add(light);\n    var x = -1;\n    var ballMesh = new THREE.SphereGeometry(0.04); // var ballMat = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n\n    var ballMat = new THREE.MeshPhongMaterial({\n      color: 0xdadada\n    });\n\n    for (var i = 0; i < 20; i++) {\n      window['cube' + i] = new THREE.Mesh(ballMesh, ballMat);\n      eval('cube' + i).position.x = x + i / 15;\n      eval('cube' + i).position.y = 0.1 + i / 15; // eval('cube'+i).scale.set(i/10, i/10, i/10);\n\n      eval('cube' + i).castShadow = true;\n      eval('cube' + i).receiveShadow = true;\n      scene.add(eval('cube' + i));\n      console.log(eval('cube' + i));\n      renderer.render(scene, camera);\n    }\n\n    var tableMesh = new THREE.BoxGeometry(2.74, 0.05, 1.526);\n    var tableMat = new THREE.MeshPhongMaterial({\n      color: 0x335f51\n    });\n    var table = new THREE.Mesh(tableMesh, tableMat);\n    table.castShadow = true;\n    table.receiveShadow = true;\n    scene.add(table);\n\n    function animate() {\n      controls.update();\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate(); // var geometry = new THREE.BoxGeometry( 2, 2, 2 );\n    // var material = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n    // var cube = new THREE.Mesh( geometry, material );\n    // cube.castShadow = true;\n    // cube.receiveShadow = true;\n    // scene.add( cube );\n    // camera.position.z = 5;\n    // var animate = function () {\n    //   requestAnimationFrame( animate );\n    //   cube.rotation.x += 0.01;\n    //   cube.rotation.y += 0.01;\n    //   cube.rotation.z += 0.01;\n    //   renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewport\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ashtonmaze/Code/GitHub/T3/frontend/src/App.js"],"names":["React","Component","THREE","OrbitControls","App","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","background","Color","setSize","document","body","appendChild","domElement","render","position","z","y","x","lookAt","Vector3","controls","light","DirectionalLight","add","ballMesh","SphereGeometry","ballMat","MeshPhongMaterial","color","i","Mesh","eval","castShadow","receiveShadow","console","log","tableMesh","BoxGeometry","tableMat","table","animate","update","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n// import { Vector3 } from \"three\";\nimport './App.css'\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene();\n    // const canvas = document.querySelector('viewport');\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // var renderer = new THREE.WebGLRenderer({ canvas });\n    var renderer = new THREE.WebGLRenderer();\n    scene.background = new THREE.Color('grey');\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    document.body.appendChild( renderer.domElement );\n    renderer.render( scene, camera );\n\n    camera.position.z = 2;\n    camera.position.y = 1.5;\n    camera.position.x = 1;\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\n    const controls = new OrbitControls( camera, renderer.domElement );\n\n    // var overhead = new THREE.AmbientLight( {color: 0xffffff}, 2);\n    // scene.add( overhead );\n\n    const light = new THREE.DirectionalLight( 0x404040, 5); // soft white light\n    scene.add( light );\n\n    var x = -1\n    var ballMesh = new THREE.SphereGeometry( 0.04 );\n    // var ballMat = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n    var ballMat = new THREE.MeshPhongMaterial( { color: 0xdadada } );\n    for (var i = 0; i < 20; i++) {\n      window['cube'+i] = new THREE.Mesh( ballMesh, ballMat );\n      eval('cube'+i).position.x = (x+(i/15));\n      eval('cube'+i).position.y = (0.1+(i/15));\n      // eval('cube'+i).scale.set(i/10, i/10, i/10);\n      eval('cube'+i).castShadow = true;\n      eval('cube'+i).receiveShadow = true;\n      scene.add( eval('cube'+i) );\n      console.log(eval('cube'+i));\n      renderer.render( scene, camera );\n    }\n\n    var tableMesh = new THREE.BoxGeometry( 2.74, 0.05, 1.526 );\n    var tableMat = new THREE.MeshPhongMaterial( {color: 0x335f51});\n    var table = new THREE.Mesh( tableMesh, tableMat );\n    table.castShadow= true;\n    table.receiveShadow = true;\n    scene.add( table );\n\n    function animate()\n    {\n        controls.update();\n        requestAnimationFrame ( animate );  \n        renderer.render (scene, camera);\n    }\n    animate();\n\n    // var geometry = new THREE.BoxGeometry( 2, 2, 2 );\n    // var material = new THREE.MeshBasicMaterial( { color: 0xdadada } );\n    // var cube = new THREE.Mesh( geometry, material );\n    // cube.castShadow = true;\n    // cube.receiveShadow = true;\n    // scene.add( cube );\n    // camera.position.z = 5;\n    // var animate = function () {\n    //   requestAnimationFrame( animate );\n    //   cube.rotation.x += 0.01;\n    //   cube.rotation.y += 0.01;\n    //   cube.rotation.z += 0.01;\n    //   renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return (\n      <div className=\"viewport\"></div>\n    )\n  }\n}\nexport default App"]},"metadata":{},"sourceType":"module"}